#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import operator
import typing
from functools import partial
from itertools import starmap
from operator import attrgetter

from OCC.wrapper.AIS import AIS_Point
from OCC.wrapper.Geom import Geom_CartesianPoint
from OCC.wrapper.Quantity import Quantity_Color, Quantity_TOC_RGB

from parapy.core import ensure_tuple
from parapy.core.utilities import get_rgb_value
from parapy.geom import Orientation, Position, Vector

_avg = lambda vals: sum(vals) / len(vals)


def average_of_vectors(vectors: typing.Iterable[Vector]) -> Vector:
    vectors = ensure_tuple(vectors)
    xs, ys, zs = map(lambda key: map(attrgetter(key), vectors), 'xyz')
    return Vector(*map(_avg, [xs, ys, zs]))


def _to_matrix(obj):
    if isinstance(obj, Orientation):
        return obj.mat
    elif isinstance(obj, Position):
        return obj.orientation.mat
    else:
        raise ValueError(obj)


def RGB2QuantityColor(color):
    return Quantity_Color(color[0] / 255, color[1] / 255, color[2] / 255,
                          Quantity_TOC_RGB)


def pp_to_quantity(pp_color):
    return RGB2QuantityColor(get_rgb_value(pp_color))


def ais_set_style(ais_shape, color, transp=.0):
    qty_color = pp_to_quantity(color)
    ais_shape.SetColor(qty_color)
    if transp:
        ais_shape.SetTransparency(transp)


def make_ais_point(pt):
    obj = Geom_CartesianPoint(pt.gp_Pnt).handle
    return AIS_Point(obj).handle


def round_to_increment(x, increment):
    if not increment:  # None or 0
        return x
    return increment * round(x / increment)


def round_vector(vector: Vector, increment: typing.Union[int, float]):
    length = round_to_increment(vector.length, increment)
    return vector.normalize * length


color = typing.Union[str, typing.Tuple[int, int, int]]


def vector_to_color(
        vector: Vector,
        xyz_component_colors: typing.Tuple[color, color, color]) -> color:
    """given three colors (as (int,int,int))
    representing X, Y, Z color codes, return the color of the vector.
    """
    rgb_colors = map(get_rgb_value, xyz_component_colors)
    rgb_color_vectors = starmap(Vector, zip(*rgb_colors))
    fn = partial(operator.mul, abs(vector.normalize))
    return tuple(map(int, map(fn, rgb_color_vectors)))  # noqa


if __name__ == '__main__':
    print(vector_to_color(Vector(1, 0, 0), ('red', 'green', 'blue')))
    print(vector_to_color(Vector(0, 1, 0), ('red', 'green', 'blue')))
    print(vector_to_color(Vector(0, 0, 1), ('red', 'green', 'blue')))
    print(vector_to_color(Vector(1, 1, 1), ('red', 'green', 'blue')))
