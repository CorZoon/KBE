#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.


import os
import typing
from functools import update_wrapper, singledispatch

from wx import TheClipboard, TextDataObject, MessageBox


# todo move this to some utils
def singledispatchmethod(func):
    dispatcher = singledispatch(func)

    def wrapper(*args, **kw):
        return dispatcher.dispatch(args[1].__class__)(*args, **kw)

    wrapper.register = dispatcher.register
    update_wrapper(wrapper, func)
    return wrapper


class Clipboard:
    """Wx Clipboard wrapper. Usage:
    >>> with Clipboard() as c:
    ...     c.write('foo')
    ...
    ... with Clipboard() as c:
    ...     val = c.read()
    ...     print(val)
    'foo'
    """

    def __init__(self):
        self._clipboard = TheClipboard
        if TheClipboard is None:
            raise RuntimeError("impossible to init Clipboard: wx.TheClipboard"
                               "is None. Most likely wx isn't running.")

    def __enter__(self):
        assert not self._clipboard.IsOpened(), 'clipboard already open'
        opened = self._clipboard.Open()
        if not opened:
            msg = "Cannot copy value to clipboard: " \
                  "unable to open the clipboard."
            if os.name != 'nt':
                msg += " Verify that a clipboard manager is installed."
            MessageBox(msg, "Error")

        return _ClipboardIO()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._clipboard.Close()


class _ClipboardIO(Clipboard):
    def read(self):
        text_data = TextDataObject()
        self._clipboard.GetData(text_data)
        text = text_data.GetText()
        return text

    @singledispatchmethod
    def write(self, obj: typing.Any) -> bool:
        raise NotImplementedError(f"obj: {obj} of type {type(obj)}")

    @write.register
    def _(self, obj: str):
        data = TextDataObject()
        data.SetText(obj)
        self._clipboard.SetData(data)
        return True


if __name__ == '__main__':
    from parapy.gui.wx_utils import FrameContext

    with FrameContext() as fc:
        with Clipboard() as c:
            c.write('foo')

        with Clipboard() as c:
            val = c.read()
            print(val)  # --> 'foo'
