#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

#
#      _____                _____          _____
#     |  __ \              |  __ \        / ____|
#     | |__) |_ _ _ __ __ _| |__) |   _  | |     ___  _ __ ___
#     |  ___/ _` | '__/ _` |  ___/ | | | | |    / _ \| '__/ _ \
#     | |  | (_| | | | (_| | |   | |_| | | |___| (_) | | |  __/
#     |_|   \__,_|_|  \__,_|_|    \__, |  \_____\___/|_|  \___|
#                                  __/ |
#                                 |___/

"""Welcome to ParaPy, a Knowledge-Based Engineering platform in and for the
Python programming language. ParaPy "extends" the basic Python language with
additional built-ins. Import the most basic features using::

    from parapy.core import *

The set of variables that are imported with this statement are deliberately
kept small and are named such that it is unlikely that names accidentally
collide with other packages.
The core package provides the ParaPy grammar, i.e. a set of (descriptor)
classes that can be used to declare cached and dependency-tracked classes
consisting of inputs, attributes and parts. Hello world::

    >>> from parapy.core import *
    >>> # define a first class
    >>> class Aircraft(Base):
    ...
    ...     pax = Input(label="number of passengers")
    ...
    ...     range = Input(default=1000.)
    ...
    ...     @Attribute
    ...     def weight(self):
    ...         print("I'm applying some engineering rules")
    ...         return self.pax * self.range / 500.
    ...
    ...     @Part
    ...     def fuselage(self):
    ...         return Fuselage(length=self.range / 5.0)
    ...
    >>> class Fuselage(Base):
    ...
    ...     length = Input()
    ...
    >>> # instantiate the object
    >>> obj = Aircraft(pax=200)
    >>> obj # doctest: +ELLIPSIS
    <Aircraft root at 0x...>
    >>> obj.weight
    I'm applying some engineering rules
    400.0
    >>> # values are cached (no recalculation)
    >>> obj.weight
    400.0
    >>> # run-time dependency tracking
    >>> obj.range = 2000
    >>> obj.weight
    I'm applying some engineering rules
    800.0
    >>> # object aggregration
    >>> obj.fuselage  # doctest: +ELLIPSIS
    <Fuselage root.fuselage at 0x...>
    >>> obj.fuselage.parent # doctest: +ELLIPSIS
    <Aircraft root at 0x...>
    >>> obj.fuselage.length
    400.0

Other packages of interest:

- parapy.io: read from or write to common data files (.csv, .json, .xlsx)
- parapy.geom: library with curve, surface and solid classes and routines.
- parapy.geom.exchange: import from or export to standard geometry formats
    (.iges, .step, .stl, .brep).
- parapy.mesh: library with mesh control and algorithms classes and routines.
- parapy.cae: solutions specific to Computer-Aided Engineering tools
    (NASTRAN, VSAERO, etc.).
- parapy.api: communicating with ParaPy (HTTP, TCP, etc.).
- parapy.gui: the graphical user interface and its components.
"""

import warnings

from parapy.core.globs import derived, required
from parapy.core.sequence import MutableSequence, Sequence
from parapy.core.base import Base
from parapy.core.dynamic import DynamicType
from parapy.core.input import Input
from parapy.core.attribute import Attribute
from parapy.core.part import Part, HiddenPart
from parapy.core.dependencies import child
from parapy.core.decorators import action, gui_callable, on_event
from parapy.core.io import FileReader, FileWriter
from parapy.core.utilities import *
from parapy.core.collections import List
from parapy.core import validate as val
from parapy.config import CONFIGURATION as _conf

if _conf.getboolean("core.runtime", "cleanup_traceback"):
    from parapy.tb import install_hook as _install_hook

    _install_hook()
    del _install_hook

if _conf.get("general", "IDE") == "PyDev":
    from parapy.core.pydev import patch as _patch

    _patch()

if _conf.getboolean("core.debug", "patch_pydevd_f_trace"):
    from parapy.core.pydev import (
        patch_f_trace as _patch_f_trace, pydevd_running as _pydevd_running)

    if _pydevd_running():
        try:
            _patch_f_trace()
        except Exception as e:
            warnings.warn("Could not patch pydevd f_trace: {}".format(e))


if _conf.getboolean("core.debug", "patch_pydevd_step_compiled_frame"):
    from parapy.core.pydev import (
        pydevd_running as _pydevd_running,
        patch_step_compiled_frame as _patch_step_compiled_frame,
        _get_pydevd_patch_version)

    if _pydevd_running() and _get_pydevd_patch_version() == "2019_2":
        try:
            _patch_step_compiled_frame()
        except Exception as e:
            warnings.warn("Could not apply 'step through compiled frame' "
                          "patch: {}".format(e))
